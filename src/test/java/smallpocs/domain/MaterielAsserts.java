package smallpocs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MaterielAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterielAllPropertiesEquals(Materiel expected, Materiel actual) {
        assertMaterielAutoGeneratedPropertiesEquals(expected, actual);
        assertMaterielAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterielAllUpdatablePropertiesEquals(Materiel expected, Materiel actual) {
        assertMaterielUpdatableFieldsEquals(expected, actual);
        assertMaterielUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterielAutoGeneratedPropertiesEquals(Materiel expected, Materiel actual) {
        assertThat(expected)
            .as("Verify Materiel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterielUpdatableFieldsEquals(Materiel expected, Materiel actual) {
        assertThat(expected)
            .as("Verify Materiel relevant properties")
            .satisfies(e -> assertThat(e.getEtat()).as("check etat").isEqualTo(actual.getEtat()))
            .satisfies(e -> assertThat(e.getRelease()).as("check release").isEqualTo(actual.getRelease()))
            .satisfies(e -> assertThat(e.getModele()).as("check modele").isEqualTo(actual.getModele()))
            .satisfies(e -> assertThat(e.getSorte()).as("check sorte").isEqualTo(actual.getSorte()))
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(e -> assertThat(e.getRegion()).as("check region").isEqualTo(actual.getRegion()))
            .satisfies(e -> assertThat(e.getMission()).as("check mission").isEqualTo(actual.getMission()))
            .satisfies(e -> assertThat(e.getEntite()).as("check entite").isEqualTo(actual.getEntite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterielUpdatableRelationshipsEquals(Materiel expected, Materiel actual) {
        // empty method
    }
}
