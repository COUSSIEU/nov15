package smallpocs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CandidatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAllPropertiesEquals(Candidat expected, Candidat actual) {
        assertCandidatAutoGeneratedPropertiesEquals(expected, actual);
        assertCandidatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAllUpdatablePropertiesEquals(Candidat expected, Candidat actual) {
        assertCandidatUpdatableFieldsEquals(expected, actual);
        assertCandidatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatAutoGeneratedPropertiesEquals(Candidat expected, Candidat actual) {
        assertThat(expected)
            .as("Verify Candidat auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatUpdatableFieldsEquals(Candidat expected, Candidat actual) {
        assertThat(expected)
            .as("Verify Candidat relevant properties")
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()))
            .satisfies(e -> assertThat(e.getSpringboot()).as("check springboot").isEqualTo(actual.getSpringboot()))
            .satisfies(e -> assertThat(e.getAngular()).as("check angular").isEqualTo(actual.getAngular()))
            .satisfies(e -> assertThat(e.getHtml()).as("check html").isEqualTo(actual.getHtml()))
            .satisfies(e -> assertThat(e.getCss()).as("check css").isEqualTo(actual.getCss()))
            .satisfies(e -> assertThat(e.getTransport()).as("check transport").isEqualTo(actual.getTransport()))
            .satisfies(e -> assertThat(e.getSport()).as("check sport").isEqualTo(actual.getSport()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCandidatUpdatableRelationshipsEquals(Candidat expected, Candidat actual) {
        // empty method
    }
}
